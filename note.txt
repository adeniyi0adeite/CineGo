- subscription is the snippet i would love to use.


Here’s an improved version of your UserSubscription model with the following enhancements:

Key Improvements:
Refactored plan price management: Removed hardcoded prices from the model’s save() method and instead introduced a SubscriptionPlan model to make it easier to manage plans and their respective prices.
Dynamic plan pricing: Prices can now be modified in the admin panel or any other interface.
Improved __str__ representation: Made the string representation more readable.
Proper use of related_name for better reverse query readability.
Error handling for invalid plan names: Ensured the model validates against the available plans when calling save().
Clearer is_active method: For better readability and easier debugging.
Updated Model
python
Copy code
from django.db import models
from django.utils import timezone
from datetime import timedelta
from django.core.exceptions import ValidationError

PLAN_CHOICES = [
    ('basic', 'Basic'),
    ('premium', 'Premium'),
    ('vip', 'VIP'),
]

class SubscriptionPlan(models.Model):
    name = models.CharField(max_length=100, choices=PLAN_CHOICES, unique=True)
    price = models.DecimalField(max_digits=6, decimal_places=2, default=1000.00)
    duration = models.IntegerField(default=30, help_text="Duration of the plan in days")  # Example duration in days

    def __str__(self):
        return f"{self.get_name_display()} - {self.price} NGN"

class UserSubscription(models.Model):
    user = models.ForeignKey(UserProfile, related_name='subscriptions', on_delete=models.CASCADE)
    plan = models.ForeignKey(SubscriptionPlan, on_delete=models.SET_NULL, null=True)
    start_date = models.DateTimeField(auto_now_add=True)
    end_date = models.DateTimeField()

    def is_active(self):
        """Check if the subscription is currently active."""
        return timezone.now() <= self.end_date

    def __str__(self):
        return f"{self.user.user.username} - {self.plan.name.capitalize()} - {self.plan.price} NGN"

    def save(self, *args, **kwargs):
        """Override save to calculate end_date based on plan duration."""
        if not self.plan:
            raise ValidationError("Subscription plan is required.")

        # Set end date based on the plan's duration
        self.end_date = self.start_date + timedelta(days=self.plan.duration)

        super().save(*args, **kwargs)
Explanation of Improvements:
SubscriptionPlan Model: This model stores all details related to the subscription plan itself, like its name, price, and duration (in days). This makes it easy to manage plans without hardcoding prices in the save() method.

Plans like "Basic," "Premium," and "VIP" can now be configured in the SubscriptionPlan model and changed easily from the Django Admin panel or any other interface.
UserSubscription Model:

The plan field now uses a ForeignKey to the SubscriptionPlan model. This allows each user subscription to refer to the appropriate plan, which includes the price and duration.
The is_active() method simply checks whether the current date and time are within the subscription period.
Validation:

In the save() method, I added validation to ensure that a SubscriptionPlan must be selected.
Improved Readability:

The __str__() method clearly shows the username, plan, and price for each subscription, making debugging and logging more straightforward.
Benefits:
Flexibility: You can now add or modify subscription plans, their prices, and durations without changing your code.
Reusability: This design allows you to use SubscriptionPlan in other parts of your app if necessary (e.g., for subscription listings).






Inspired by your thoughts on piracy and movie access

Hi Mr. Niyi Akinmolayan

Inspired by your thoughts on piracy and movie access, I built a prototype called CineGo. 
It allows:
Pay-as-you-watch (Video stops after 4 seconds into it and prompt user to pay for full access)
Subscription plans for full access
You can check it out here: https://dacodar.pythonanywhere.com/

User 1 (Has active subscription):
Username: john_doe
Password: john

User 2 (Has NO active subscription -  can only stream for 4 seconds):
Username: baba_dudu
Password: dudu

I would love to hear your thoughts.

Best,
Adeniyi Adeite
09153837626


Season greetings , Inspired by your thoughts on piracy and movie access, I built a prototype called CineGo. 
It stops movies after 4 seconds, prompting viewers to pay for full access (threshold adjustable). 
I’ve sent you a DM with more details Sir and I would love to hear your thoughts 🙏






Actor Objects
- Full name
- Profile Picture
- Date of Birth
- Place of Birth
- Age (Autogenerate)
- Genres
- Total Number of movies
- First Movie
- Last movie
- About


Director Objects
- Full name
- Profile Picture
- Date of Birth
- Place of Birth
- Age (Autogenerate)
- Genres
- Total Number of movies
- First Movie
- Last movie
- About

Movie Objects
- title
- Price
- genre (choices)
- Parental Guidiance
- running time
- premiere
- Director
- Actors
- Description
- Artwork
- Date released

Subscription Objects
- name
- Price
- Number of days
- Resolution
- device
- Support





# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&9!u+&4qk!=x&=9_qn+gb6cn#yu(w)t!!0uoobm%xau*i6s_o7'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'dacodar.pythonanywhere.com' ]
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'users',
    'videos',
    'payment',




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# For serving static files in development

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')



# For media files (user-uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100 MB limit (adjust as necessary)
VIDEO_FREE_TIME_LIMIT = 4



# URL Shortening library configuration
HASHIDS_SALT = 'your_secret_salt'

LOGIN_URL = '/users/login/'  # Update with your login view URL
LOGIN_REDIRECT_URL = '/'  # Redirect after login, change it as per your home URL

CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',  # Add this for local testing
]


PAYSTACK_CALLBACK_URL = 'http://dacodar.pythonanywhere.com/payment/callback/'  # Or your deployed site's URL
PAYSTACK_PUBLIC_KEY = 'pk_test_e3ecbb5dc1a18dc3f3e24ce9e7582df530f29713'
PAYSTACK_SECRET_KEY = 'sk_test_0d7f8930343dac6e7b26c4e033c38826ed8252e4'



