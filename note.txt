- subscription is the snippet i would love to use.


Here’s an improved version of your UserSubscription model with the following enhancements:

Key Improvements:
Refactored plan price management: Removed hardcoded prices from the model’s save() method and instead introduced a SubscriptionPlan model to make it easier to manage plans and their respective prices.
Dynamic plan pricing: Prices can now be modified in the admin panel or any other interface.
Improved __str__ representation: Made the string representation more readable.
Proper use of related_name for better reverse query readability.
Error handling for invalid plan names: Ensured the model validates against the available plans when calling save().
Clearer is_active method: For better readability and easier debugging.
Updated Model
python
Copy code
from django.db import models
from django.utils import timezone
from datetime import timedelta
from django.core.exceptions import ValidationError

PLAN_CHOICES = [
    ('basic', 'Basic'),
    ('premium', 'Premium'),
    ('vip', 'VIP'),
]

class SubscriptionPlan(models.Model):
    name = models.CharField(max_length=100, choices=PLAN_CHOICES, unique=True)
    price = models.DecimalField(max_digits=6, decimal_places=2, default=1000.00)
    duration = models.IntegerField(default=30, help_text="Duration of the plan in days")  # Example duration in days

    def __str__(self):
        return f"{self.get_name_display()} - {self.price} NGN"

class UserSubscription(models.Model):
    user = models.ForeignKey(UserProfile, related_name='subscriptions', on_delete=models.CASCADE)
    plan = models.ForeignKey(SubscriptionPlan, on_delete=models.SET_NULL, null=True)
    start_date = models.DateTimeField(auto_now_add=True)
    end_date = models.DateTimeField()

    def is_active(self):
        """Check if the subscription is currently active."""
        return timezone.now() <= self.end_date

    def __str__(self):
        return f"{self.user.user.username} - {self.plan.name.capitalize()} - {self.plan.price} NGN"

    def save(self, *args, **kwargs):
        """Override save to calculate end_date based on plan duration."""
        if not self.plan:
            raise ValidationError("Subscription plan is required.")

        # Set end date based on the plan's duration
        self.end_date = self.start_date + timedelta(days=self.plan.duration)

        super().save(*args, **kwargs)
Explanation of Improvements:
SubscriptionPlan Model: This model stores all details related to the subscription plan itself, like its name, price, and duration (in days). This makes it easy to manage plans without hardcoding prices in the save() method.

Plans like "Basic," "Premium," and "VIP" can now be configured in the SubscriptionPlan model and changed easily from the Django Admin panel or any other interface.
UserSubscription Model:

The plan field now uses a ForeignKey to the SubscriptionPlan model. This allows each user subscription to refer to the appropriate plan, which includes the price and duration.
The is_active() method simply checks whether the current date and time are within the subscription period.
Validation:

In the save() method, I added validation to ensure that a SubscriptionPlan must be selected.
Improved Readability:

The __str__() method clearly shows the username, plan, and price for each subscription, making debugging and logging more straightforward.
Benefits:
Flexibility: You can now add or modify subscription plans, their prices, and durations without changing your code.
Reusability: This design allows you to use SubscriptionPlan in other parts of your app if necessary (e.g., for subscription listings).
